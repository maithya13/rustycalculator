use std::io;

enum Operation {
    Add,
    Subtract,
    Multiply,
    Divide,
}

impl Operation {
    fn from_str(op: &str) -> Option<Operation> {
        match op {
            "+" => Some(Operation::Add),
            "-" => Some(Operation::Subtract),
            "*" => Some(Operation::Multiply),
            "/" => Some(Operation::Divide),
            _ => None,
        }
    }

    fn apply(&self, a: f64, b: f64) -> f64 {
        match self {
            Operation::Add => a + b,
            Operation::Subtract => a - b,
            Operation::Multiply => a * b,
            Operation::Divide => a / b,
        }
    }
}

fn main() {
    let mut input = String::new();

    println!("Enter the first number: ");
    io::stdin().read_line(&mut input).unwrap();
    let a: f64 = input.trim().parse().expect("Please enter a valid number");

    input.clear();

    println!("Enter the operation (+, -, *, /): ");
    io::stdin().read_line(&mut input).unwrap();
    let operation_str = input.trim();

    input.clear();

    println!("Enter the second number: ");
    io::stdin().read_line(&mut input).unwrap();
    let b: f64 = input.trim().parse().expect("Please enter a valid number");

    if let Some(operation) = Operation::from_str(operation_str) {
        let result = operation.apply(a, b);
        println!("Result: {}", result);
    } else {
        println!("Invalid operation!");
    }
}
